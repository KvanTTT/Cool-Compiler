//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g 2012-01-27 23:47:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

#pragma warning disable 3021

using System;
using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace CoolCompiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CoolGrammarLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASSIGN=4;
	public const int ATSIGN=5;
	public const int AtSignTypeName=6;
	public const int BoolTypeName=7;
	public const int BooleanValue=8;
	public const int CASE=9;
	public const int CLASS=10;
	public const int COLON=11;
	public const int COMMA=12;
	public const int COMMENT=13;
	public const int CaseExp=14;
	public const int Class=15;
	public const int ClassesList=16;
	public const int Curly=17;
	public const int DIGIT=18;
	public const int DIV=19;
	public const int DOT=20;
	public const int ELSE=21;
	public const int EQUAL=22;
	public const int ESAC=23;
	public const int Expr=24;
	public const int Exprs=25;
	public const int FALSE=26;
	public const int FI=27;
	public const int FeatureList=28;
	public const int FuncDef=29;
	public const int FunctionArgsList=30;
	public const int GE=31;
	public const int GT=32;
	public const int HENCE=33;
	public const int ID=34;
	public const int IF=35;
	public const int IN=36;
	public const int INHERITS=37;
	public const int INTEGER=38;
	public const int ISVOID=39;
	public const int IdValue=40;
	public const int ImplicitInvoke=41;
	public const int IntTypeName=42;
	public const int IntegerValue=43;
	public const int InvokeExprs=44;
	public const int LCURLY=45;
	public const int LE=46;
	public const int LET=47;
	public const int LETTER=48;
	public const int LOOP=49;
	public const int LPAREN=50;
	public const int LT=51;
	public const int LetExprs=52;
	public const int LocalOrFieldInit=53;
	public const int MINUS=54;
	public const int MULT=55;
	public const int MULTILINE_COMMENT=56;
	public const int NEG=57;
	public const int NEW=58;
	public const int NOT=59;
	public const int OF=60;
	public const int ObjectTypeName=61;
	public const int PLUS=62;
	public const int POOL=63;
	public const int RCURLY=64;
	public const int RPAREN=65;
	public const int SELF=66;
	public const int SEMI=67;
	public const int STRING=68;
	public const int SelfTypeTypeName=69;
	public const int SelfValue=70;
	public const int StringTypeName=71;
	public const int StringValue=72;
	public const int THEN=73;
	public const int TRUE=74;
	public const int Term=75;
	public const int VOID=76;
	public const int VoidValue=77;
	public const int WHILE=78;
	public const int WS=79;

    // delegates
    // delegators

	public CoolGrammarLexer()
	{
		OnCreated();
	}

	public CoolGrammarLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CoolGrammarLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_CLASS();
	partial void LeaveRule_CLASS();

	// $ANTLR start "CLASS"
	[GrammarRule("CLASS")]
	private void mCLASS()
	{
		EnterRule_CLASS();
		EnterRule("CLASS", 1);
		TraceIn("CLASS", 1);
		try
		{
			int _type = CLASS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:138:7: ( 'class' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:138:9: 'class'
			{
			DebugLocation(138, 9);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLASS", 1);
			LeaveRule("CLASS", 1);
			LeaveRule_CLASS();
		}
	}
	// $ANTLR end "CLASS"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 2);
		TraceIn("ELSE", 2);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:139:6: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:139:8: 'else'
			{
			DebugLocation(139, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 2);
			LeaveRule("ELSE", 2);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 3);
		TraceIn("FALSE", 3);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:140:7: ( 'false' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:140:9: 'false'
			{
			DebugLocation(140, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 3);
			LeaveRule("FALSE", 3);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FI();
	partial void LeaveRule_FI();

	// $ANTLR start "FI"
	[GrammarRule("FI")]
	private void mFI()
	{
		EnterRule_FI();
		EnterRule("FI", 4);
		TraceIn("FI", 4);
		try
		{
			int _type = FI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:141:4: ( 'fi' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:141:6: 'fi'
			{
			DebugLocation(141, 6);
			Match("fi"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FI", 4);
			LeaveRule("FI", 4);
			LeaveRule_FI();
		}
	}
	// $ANTLR end "FI"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 5);
		TraceIn("IF", 5);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:142:4: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:142:6: 'if'
			{
			DebugLocation(142, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 5);
			LeaveRule("IF", 5);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 6);
		TraceIn("IN", 6);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:143:4: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:143:6: 'in'
			{
			DebugLocation(143, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 6);
			LeaveRule("IN", 6);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_INHERITS();
	partial void LeaveRule_INHERITS();

	// $ANTLR start "INHERITS"
	[GrammarRule("INHERITS")]
	private void mINHERITS()
	{
		EnterRule_INHERITS();
		EnterRule("INHERITS", 7);
		TraceIn("INHERITS", 7);
		try
		{
			int _type = INHERITS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:144:10: ( 'inherits' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:144:12: 'inherits'
			{
			DebugLocation(144, 12);
			Match("inherits"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INHERITS", 7);
			LeaveRule("INHERITS", 7);
			LeaveRule_INHERITS();
		}
	}
	// $ANTLR end "INHERITS"

	partial void EnterRule_ISVOID();
	partial void LeaveRule_ISVOID();

	// $ANTLR start "ISVOID"
	[GrammarRule("ISVOID")]
	private void mISVOID()
	{
		EnterRule_ISVOID();
		EnterRule("ISVOID", 8);
		TraceIn("ISVOID", 8);
		try
		{
			int _type = ISVOID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:145:8: ( 'isvoid' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:145:10: 'isvoid'
			{
			DebugLocation(145, 10);
			Match("isvoid"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ISVOID", 8);
			LeaveRule("ISVOID", 8);
			LeaveRule_ISVOID();
		}
	}
	// $ANTLR end "ISVOID"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 9);
		TraceIn("LET", 9);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:146:5: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:146:7: 'let'
			{
			DebugLocation(146, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 9);
			LeaveRule("LET", 9);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LOOP();
	partial void LeaveRule_LOOP();

	// $ANTLR start "LOOP"
	[GrammarRule("LOOP")]
	private void mLOOP()
	{
		EnterRule_LOOP();
		EnterRule("LOOP", 10);
		TraceIn("LOOP", 10);
		try
		{
			int _type = LOOP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:147:6: ( 'loop' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:147:8: 'loop'
			{
			DebugLocation(147, 8);
			Match("loop"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOOP", 10);
			LeaveRule("LOOP", 10);
			LeaveRule_LOOP();
		}
	}
	// $ANTLR end "LOOP"

	partial void EnterRule_POOL();
	partial void LeaveRule_POOL();

	// $ANTLR start "POOL"
	[GrammarRule("POOL")]
	private void mPOOL()
	{
		EnterRule_POOL();
		EnterRule("POOL", 11);
		TraceIn("POOL", 11);
		try
		{
			int _type = POOL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:148:6: ( 'pool' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:148:8: 'pool'
			{
			DebugLocation(148, 8);
			Match("pool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POOL", 11);
			LeaveRule("POOL", 11);
			LeaveRule_POOL();
		}
	}
	// $ANTLR end "POOL"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 12);
		TraceIn("THEN", 12);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:149:6: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:149:8: 'then'
			{
			DebugLocation(149, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 12);
			LeaveRule("THEN", 12);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 13);
		TraceIn("WHILE", 13);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:150:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:150:9: 'while'
			{
			DebugLocation(150, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 13);
			LeaveRule("WHILE", 13);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 14);
		TraceIn("CASE", 14);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:151:6: ( 'case' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:151:8: 'case'
			{
			DebugLocation(151, 8);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 14);
			LeaveRule("CASE", 14);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_ESAC();
	partial void LeaveRule_ESAC();

	// $ANTLR start "ESAC"
	[GrammarRule("ESAC")]
	private void mESAC()
	{
		EnterRule_ESAC();
		EnterRule("ESAC", 15);
		TraceIn("ESAC", 15);
		try
		{
			int _type = ESAC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:152:6: ( 'esac' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:152:8: 'esac'
			{
			DebugLocation(152, 8);
			Match("esac"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESAC", 15);
			LeaveRule("ESAC", 15);
			LeaveRule_ESAC();
		}
	}
	// $ANTLR end "ESAC"

	partial void EnterRule_NEW();
	partial void LeaveRule_NEW();

	// $ANTLR start "NEW"
	[GrammarRule("NEW")]
	private void mNEW()
	{
		EnterRule_NEW();
		EnterRule("NEW", 16);
		TraceIn("NEW", 16);
		try
		{
			int _type = NEW;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:153:5: ( 'new' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:153:7: 'new'
			{
			DebugLocation(153, 7);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEW", 16);
			LeaveRule("NEW", 16);
			LeaveRule_NEW();
		}
	}
	// $ANTLR end "NEW"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 17);
		TraceIn("OF", 17);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:154:4: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:154:6: 'of'
			{
			DebugLocation(154, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 17);
			LeaveRule("OF", 17);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 18);
		TraceIn("NOT", 18);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:155:5: ( 'not' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:155:7: 'not'
			{
			DebugLocation(155, 7);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 18);
			LeaveRule("NOT", 18);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 19);
		TraceIn("TRUE", 19);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:156:6: ( 'true' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:156:8: 'true'
			{
			DebugLocation(156, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 19);
			LeaveRule("TRUE", 19);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_VOID();
	partial void LeaveRule_VOID();

	// $ANTLR start "VOID"
	[GrammarRule("VOID")]
	private void mVOID()
	{
		EnterRule_VOID();
		EnterRule("VOID", 20);
		TraceIn("VOID", 20);
		try
		{
			int _type = VOID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:157:6: ( 'void' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:157:8: 'void'
			{
			DebugLocation(157, 8);
			Match("void"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VOID", 20);
			LeaveRule("VOID", 20);
			LeaveRule_VOID();
		}
	}
	// $ANTLR end "VOID"

	partial void EnterRule_SELF();
	partial void LeaveRule_SELF();

	// $ANTLR start "SELF"
	[GrammarRule("SELF")]
	private void mSELF()
	{
		EnterRule_SELF();
		EnterRule("SELF", 21);
		TraceIn("SELF", 21);
		try
		{
			int _type = SELF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:158:6: ( 'self' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:158:8: 'self'
			{
			DebugLocation(158, 8);
			Match("self"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELF", 21);
			LeaveRule("SELF", 21);
			LeaveRule_SELF();
		}
	}
	// $ANTLR end "SELF"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 22);
		TraceIn("DOT", 22);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:164:4: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:164:6: '.'
			{
			DebugLocation(164, 6);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 22);
			LeaveRule("DOT", 22);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_ATSIGN();
	partial void LeaveRule_ATSIGN();

	// $ANTLR start "ATSIGN"
	[GrammarRule("ATSIGN")]
	private void mATSIGN()
	{
		EnterRule_ATSIGN();
		EnterRule("ATSIGN", 23);
		TraceIn("ATSIGN", 23);
		try
		{
			int _type = ATSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:165:7: ( '@' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:165:9: '@'
			{
			DebugLocation(165, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATSIGN", 23);
			LeaveRule("ATSIGN", 23);
			LeaveRule_ATSIGN();
		}
	}
	// $ANTLR end "ATSIGN"

	partial void EnterRule_NEG();
	partial void LeaveRule_NEG();

	// $ANTLR start "NEG"
	[GrammarRule("NEG")]
	private void mNEG()
	{
		EnterRule_NEG();
		EnterRule("NEG", 24);
		TraceIn("NEG", 24);
		try
		{
			int _type = NEG;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:166:4: ( '~' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:166:6: '~'
			{
			DebugLocation(166, 6);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEG", 24);
			LeaveRule("NEG", 24);
			LeaveRule_NEG();
		}
	}
	// $ANTLR end "NEG"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 25);
		TraceIn("MULT", 25);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:167:5: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:167:7: '*'
			{
			DebugLocation(167, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 25);
			LeaveRule("MULT", 25);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 26);
		TraceIn("DIV", 26);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:168:4: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:168:6: '/'
			{
			DebugLocation(168, 6);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 26);
			LeaveRule("DIV", 26);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 27);
		TraceIn("PLUS", 27);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:169:5: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:169:7: '+'
			{
			DebugLocation(169, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 27);
			LeaveRule("PLUS", 27);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 28);
		TraceIn("MINUS", 28);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:170:6: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:170:8: '-'
			{
			DebugLocation(170, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 28);
			LeaveRule("MINUS", 28);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 29);
		TraceIn("LE", 29);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:171:3: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:171:5: '<='
			{
			DebugLocation(171, 5);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 29);
			LeaveRule("LE", 29);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 30);
		TraceIn("LT", 30);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:172:3: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:172:5: '<'
			{
			DebugLocation(172, 5);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 30);
			LeaveRule("LT", 30);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 31);
		TraceIn("GE", 31);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:173:3: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:173:5: '>='
			{
			DebugLocation(173, 5);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 31);
			LeaveRule("GE", 31);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 32);
		TraceIn("GT", 32);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:174:3: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:174:5: '>'
			{
			DebugLocation(174, 5);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 32);
			LeaveRule("GT", 32);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 33);
		TraceIn("EQUAL", 33);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:175:6: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:175:8: '='
			{
			DebugLocation(175, 8);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 33);
			LeaveRule("EQUAL", 33);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 34);
		TraceIn("ASSIGN", 34);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:176:7: ( '<-' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:176:9: '<-'
			{
			DebugLocation(176, 9);
			Match("<-"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 34);
			LeaveRule("ASSIGN", 34);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 35);
		TraceIn("SEMI", 35);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:177:5: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:177:7: ';'
			{
			DebugLocation(177, 7);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 35);
			LeaveRule("SEMI", 35);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 36);
		TraceIn("LPAREN", 36);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:178:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:178:9: '('
			{
			DebugLocation(178, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 36);
			LeaveRule("LPAREN", 36);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 37);
		TraceIn("RPAREN", 37);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:179:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:179:9: ')'
			{
			DebugLocation(179, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 37);
			LeaveRule("RPAREN", 37);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 38);
		TraceIn("LCURLY", 38);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:180:7: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:180:9: '{'
			{
			DebugLocation(180, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 38);
			LeaveRule("LCURLY", 38);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 39);
		TraceIn("RCURLY", 39);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:181:7: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:181:9: '}'
			{
			DebugLocation(181, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 39);
			LeaveRule("RCURLY", 39);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 40);
		TraceIn("COMMA", 40);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:182:6: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:182:8: ','
			{
			DebugLocation(182, 8);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 40);
			LeaveRule("COMMA", 40);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 41);
		TraceIn("COLON", 41);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:183:6: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:183:8: ':'
			{
			DebugLocation(183, 8);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 41);
			LeaveRule("COLON", 41);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_HENCE();
	partial void LeaveRule_HENCE();

	// $ANTLR start "HENCE"
	[GrammarRule("HENCE")]
	private void mHENCE()
	{
		EnterRule_HENCE();
		EnterRule("HENCE", 42);
		TraceIn("HENCE", 42);
		try
		{
			int _type = HENCE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:184:6: ( '=>' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:184:8: '=>'
			{
			DebugLocation(184, 8);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HENCE", 42);
			LeaveRule("HENCE", 42);
			LeaveRule_HENCE();
		}
	}
	// $ANTLR end "HENCE"

	partial void EnterRule_IntTypeName();
	partial void LeaveRule_IntTypeName();

	// $ANTLR start "IntTypeName"
	[GrammarRule("IntTypeName")]
	private void mIntTypeName()
	{
		EnterRule_IntTypeName();
		EnterRule("IntTypeName", 43);
		TraceIn("IntTypeName", 43);
		try
		{
			int _type = IntTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:186:12: ( 'Int' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:186:14: 'Int'
			{
			DebugLocation(186, 14);
			Match("Int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntTypeName", 43);
			LeaveRule("IntTypeName", 43);
			LeaveRule_IntTypeName();
		}
	}
	// $ANTLR end "IntTypeName"

	partial void EnterRule_BoolTypeName();
	partial void LeaveRule_BoolTypeName();

	// $ANTLR start "BoolTypeName"
	[GrammarRule("BoolTypeName")]
	private void mBoolTypeName()
	{
		EnterRule_BoolTypeName();
		EnterRule("BoolTypeName", 44);
		TraceIn("BoolTypeName", 44);
		try
		{
			int _type = BoolTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:187:13: ( 'Bool' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:187:15: 'Bool'
			{
			DebugLocation(187, 15);
			Match("Bool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BoolTypeName", 44);
			LeaveRule("BoolTypeName", 44);
			LeaveRule_BoolTypeName();
		}
	}
	// $ANTLR end "BoolTypeName"

	partial void EnterRule_StringTypeName();
	partial void LeaveRule_StringTypeName();

	// $ANTLR start "StringTypeName"
	[GrammarRule("StringTypeName")]
	private void mStringTypeName()
	{
		EnterRule_StringTypeName();
		EnterRule("StringTypeName", 45);
		TraceIn("StringTypeName", 45);
		try
		{
			int _type = StringTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:188:15: ( 'String' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:188:17: 'String'
			{
			DebugLocation(188, 17);
			Match("String"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringTypeName", 45);
			LeaveRule("StringTypeName", 45);
			LeaveRule_StringTypeName();
		}
	}
	// $ANTLR end "StringTypeName"

	partial void EnterRule_ObjectTypeName();
	partial void LeaveRule_ObjectTypeName();

	// $ANTLR start "ObjectTypeName"
	[GrammarRule("ObjectTypeName")]
	private void mObjectTypeName()
	{
		EnterRule_ObjectTypeName();
		EnterRule("ObjectTypeName", 46);
		TraceIn("ObjectTypeName", 46);
		try
		{
			int _type = ObjectTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:189:15: ( 'Object' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:189:17: 'Object'
			{
			DebugLocation(189, 17);
			Match("Object"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ObjectTypeName", 46);
			LeaveRule("ObjectTypeName", 46);
			LeaveRule_ObjectTypeName();
		}
	}
	// $ANTLR end "ObjectTypeName"

	partial void EnterRule_SelfTypeTypeName();
	partial void LeaveRule_SelfTypeTypeName();

	// $ANTLR start "SelfTypeTypeName"
	[GrammarRule("SelfTypeTypeName")]
	private void mSelfTypeTypeName()
	{
		EnterRule_SelfTypeTypeName();
		EnterRule("SelfTypeTypeName", 47);
		TraceIn("SelfTypeTypeName", 47);
		try
		{
			int _type = SelfTypeTypeName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:190:17: ( 'SELF_TYPE' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:190:19: 'SELF_TYPE'
			{
			DebugLocation(190, 19);
			Match("SELF_TYPE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SelfTypeTypeName", 47);
			LeaveRule("SelfTypeTypeName", 47);
			LeaveRule_SelfTypeTypeName();
		}
	}
	// $ANTLR end "SelfTypeTypeName"

	partial void EnterRule_MULTILINE_COMMENT();
	partial void LeaveRule_MULTILINE_COMMENT();

	// $ANTLR start "MULTILINE_COMMENT"
	[GrammarRule("MULTILINE_COMMENT")]
	private void mMULTILINE_COMMENT()
	{
		EnterRule_MULTILINE_COMMENT();
		EnterRule("MULTILINE_COMMENT", 48);
		TraceIn("MULTILINE_COMMENT", 48);
		try
		{
			int _type = MULTILINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:192:19: ( '(*' ( . )* '*)' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:192:21: '(*' ( . )* '*)'
			{
			DebugLocation(192, 21);
			Match("(*"); 

			DebugLocation(192, 26);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:192:26: ( . )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='*'))
				{
					int LA1_1 = input.LA(2);

					if ((LA1_1==')'))
					{
						alt1 = 2;
					}
					else if (((LA1_1>='\u0000' && LA1_1<='(')||(LA1_1>='*' && LA1_1<='\uFFFF')))
					{
						alt1 = 1;
					}


				}
				else if (((LA1_0>='\u0000' && LA1_0<=')')||(LA1_0>='+' && LA1_0<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:192:26: .
					{
					DebugLocation(192, 26);
					MatchAny(); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(192, 29);
			Match("*)"); 

			DebugLocation(192, 34);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTILINE_COMMENT", 48);
			LeaveRule("MULTILINE_COMMENT", 48);
			LeaveRule_MULTILINE_COMMENT();
		}
	}
	// $ANTLR end "MULTILINE_COMMENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 49);
		TraceIn("STRING", 49);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			int c = 0;

			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:194:7: ( '\"' ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:194:9: '\"' ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )* '\"'
			{
			DebugLocation(194, 9);
			Match('\"'); 
			DebugLocation(195, 3);
			 StringBuilder b = new StringBuilder(); 
			DebugLocation(196, 3);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:196:3: ( '\"' '\"' |c=~ ( '\"' | '\\r' | '\\n' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='\"'))
				{
					int LA2_1 = input.LA(2);

					if ((LA2_1=='\"'))
					{
						alt2 = 1;
					}


				}
				else if (((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='\uFFFF')))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:196:5: '\"' '\"'
					{
					DebugLocation(196, 5);
					Match('\"'); 
					DebugLocation(196, 9);
					Match('\"'); 
					DebugLocation(196, 16);
					 b.Append('"');

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:197:5: c=~ ( '\"' | '\\r' | '\\n' )
					{
					DebugLocation(197, 6);
					c= input.LA(1);
					input.Consume();

					DebugLocation(197, 24);
					 b.Append((char)c);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(199, 3);
			Match('\"'); 
			DebugLocation(200, 3);
			 Text = b.ToString(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 49);
			LeaveRule("STRING", 49);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 50);
		TraceIn("LETTER", 50);
		try
		{
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:203:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:
			{
			DebugLocation(203, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 50);
			LeaveRule("LETTER", 50);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 51);
		TraceIn("DIGIT", 51);
		try
		{
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:204:16: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:
			{
			DebugLocation(204, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 51);
			LeaveRule("DIGIT", 51);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 52);
		TraceIn("INTEGER", 52);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:205:9: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:205:11: ( DIGIT )+
			{
			DebugLocation(205, 11);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:205:11: ( DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:
					{
					DebugLocation(205, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 52);
			LeaveRule("INTEGER", 52);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 53);
		TraceIn("ID", 53);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:206:4: ( LETTER ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:206:6: LETTER ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(206, 6);
			mLETTER(); 
			DebugLocation(206, 13);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:206:13: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='Z')||LA4_0=='_'||(LA4_0>='a' && LA4_0<='z')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:
					{
					DebugLocation(206, 13);
					input.Consume();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 53);
			LeaveRule("ID", 53);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 54);
		TraceIn("WS", 54);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:207:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:207:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			{
			DebugLocation(207, 6);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:207:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='\t' && LA5_0<='\n')||(LA5_0>='\f' && LA5_0<='\r')||LA5_0==' '))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:
					{
					DebugLocation(207, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(207, 41);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 54);
			LeaveRule("WS", 54);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 55);
		TraceIn("COMMENT", 55);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:208:9: ( '--' ( . )* ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:208:11: '--' ( . )* ( '\\n' | '\\r' )
			{
			DebugLocation(208, 11);
			Match("--"); 

			DebugLocation(208, 16);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:208:16: ( . )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0=='\n'||LA6_0=='\r'))
				{
					alt6 = 2;
				}
				else if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:208:16: .
					{
					DebugLocation(208, 16);
					MatchAny(); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(208, 19);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(208, 31);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 55);
			LeaveRule("COMMENT", 55);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	public override void mTokens()
	{
		// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:8: ( CLASS | ELSE | FALSE | FI | IF | IN | INHERITS | ISVOID | LET | LOOP | POOL | THEN | WHILE | CASE | ESAC | NEW | OF | NOT | TRUE | VOID | SELF | DOT | ATSIGN | NEG | MULT | DIV | PLUS | MINUS | LE | LT | GE | GT | EQUAL | ASSIGN | SEMI | LPAREN | RPAREN | LCURLY | RCURLY | COMMA | COLON | HENCE | IntTypeName | BoolTypeName | StringTypeName | ObjectTypeName | SelfTypeTypeName | MULTILINE_COMMENT | STRING | INTEGER | ID | WS | COMMENT )
		int alt7=53;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:10: CLASS
			{
			DebugLocation(1, 10);
			mCLASS(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:16: ELSE
			{
			DebugLocation(1, 16);
			mELSE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:21: FALSE
			{
			DebugLocation(1, 21);
			mFALSE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:27: FI
			{
			DebugLocation(1, 27);
			mFI(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:30: IF
			{
			DebugLocation(1, 30);
			mIF(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:33: IN
			{
			DebugLocation(1, 33);
			mIN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:36: INHERITS
			{
			DebugLocation(1, 36);
			mINHERITS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:45: ISVOID
			{
			DebugLocation(1, 45);
			mISVOID(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:52: LET
			{
			DebugLocation(1, 52);
			mLET(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:56: LOOP
			{
			DebugLocation(1, 56);
			mLOOP(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:61: POOL
			{
			DebugLocation(1, 61);
			mPOOL(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:66: THEN
			{
			DebugLocation(1, 66);
			mTHEN(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:71: WHILE
			{
			DebugLocation(1, 71);
			mWHILE(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:77: CASE
			{
			DebugLocation(1, 77);
			mCASE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:82: ESAC
			{
			DebugLocation(1, 82);
			mESAC(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:87: NEW
			{
			DebugLocation(1, 87);
			mNEW(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:91: OF
			{
			DebugLocation(1, 91);
			mOF(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:94: NOT
			{
			DebugLocation(1, 94);
			mNOT(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:98: TRUE
			{
			DebugLocation(1, 98);
			mTRUE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:103: VOID
			{
			DebugLocation(1, 103);
			mVOID(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:108: SELF
			{
			DebugLocation(1, 108);
			mSELF(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:113: DOT
			{
			DebugLocation(1, 113);
			mDOT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:117: ATSIGN
			{
			DebugLocation(1, 117);
			mATSIGN(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:124: NEG
			{
			DebugLocation(1, 124);
			mNEG(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:128: MULT
			{
			DebugLocation(1, 128);
			mMULT(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:133: DIV
			{
			DebugLocation(1, 133);
			mDIV(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:137: PLUS
			{
			DebugLocation(1, 137);
			mPLUS(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:142: MINUS
			{
			DebugLocation(1, 142);
			mMINUS(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:148: LE
			{
			DebugLocation(1, 148);
			mLE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:151: LT
			{
			DebugLocation(1, 151);
			mLT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:154: GE
			{
			DebugLocation(1, 154);
			mGE(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:157: GT
			{
			DebugLocation(1, 157);
			mGT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:160: EQUAL
			{
			DebugLocation(1, 160);
			mEQUAL(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:166: ASSIGN
			{
			DebugLocation(1, 166);
			mASSIGN(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:173: SEMI
			{
			DebugLocation(1, 173);
			mSEMI(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:178: LPAREN
			{
			DebugLocation(1, 178);
			mLPAREN(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:185: RPAREN
			{
			DebugLocation(1, 185);
			mRPAREN(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:192: LCURLY
			{
			DebugLocation(1, 192);
			mLCURLY(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:199: RCURLY
			{
			DebugLocation(1, 199);
			mRCURLY(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:206: COMMA
			{
			DebugLocation(1, 206);
			mCOMMA(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:212: COLON
			{
			DebugLocation(1, 212);
			mCOLON(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:218: HENCE
			{
			DebugLocation(1, 218);
			mHENCE(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:224: IntTypeName
			{
			DebugLocation(1, 224);
			mIntTypeName(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:236: BoolTypeName
			{
			DebugLocation(1, 236);
			mBoolTypeName(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:249: StringTypeName
			{
			DebugLocation(1, 249);
			mStringTypeName(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:264: ObjectTypeName
			{
			DebugLocation(1, 264);
			mObjectTypeName(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:279: SelfTypeTypeName
			{
			DebugLocation(1, 279);
			mSelfTypeTypeName(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:296: MULTILINE_COMMENT
			{
			DebugLocation(1, 296);
			mMULTILINE_COMMENT(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:314: STRING
			{
			DebugLocation(1, 314);
			mSTRING(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:321: INTEGER
			{
			DebugLocation(1, 321);
			mINTEGER(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:329: ID
			{
			DebugLocation(1, 329);
			mID(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:332: WS
			{
			DebugLocation(1, 332);
			mWS(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\Users\\KvanTTT\\Documents\\Study\\Compilators\\CompilerConstruction\\CoolCompiler\\CoolGrammar.g:1:335: COMMENT
			{
			DebugLocation(1, 335);
			mCOMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x1\xFFFF\xC\x24\x6\xFFFF\x1\x3B\x1\x3E\x1\x40\x1\x42\x1\xFFFF\x1\x44"+
			"\x5\xFFFF\x4\x24\x4\xFFFF\x5\x24\x1\x4F\x1\x50\x1\x52\x9\x24\x1\x5C\x2"+
			"\x24\xB\xFFFF\xA\x24\x2\xFFFF\x1\x24\x1\xFFFF\x1\x24\x1\x6B\x5\x24\x1"+
			"\x71\x1\x72\x1\xFFFF\x2\x24\x1\x75\x5\x24\x1\x7B\x1\x7C\x1\x7D\x3\x24"+
			"\x1\xFFFF\x1\x81\x1\x82\x1\x83\x1\x84\x1\x24\x2\xFFFF\x1\x86\x1\x87\x1"+
			"\xFFFF\x1\x88\x3\x24\x1\x8C\x3\xFFFF\x1\x8D\x2\x24\x4\xFFFF\x1\x90\x3"+
			"\xFFFF\x3\x24\x2\xFFFF\x1\x24\x1\x95\x1\xFFFF\x1\x96\x1\x24\x1\x98\x1"+
			"\x24\x2\xFFFF\x1\x24\x1\xFFFF\x1\x9B\x1\x24\x1\xFFFF\x1\x9D\x1\xFFFF";
		private const string DFA7_eofS =
			"\x9E\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x1\x61\x1\x6C\x1\x61\x1\x66\x1\x65\x1\x6F\x2\x68\x1\x65\x1\x66"+
			"\x1\x6F\x1\x65\x6\xFFFF\x2\x2D\x1\x3D\x1\x3E\x1\xFFFF\x1\x2A\x5\xFFFF"+
			"\x1\x6E\x1\x6F\x1\x45\x1\x62\x4\xFFFF\x1\x61\x2\x73\x1\x61\x1\x6C\x3"+
			"\x30\x1\x76\x1\x74\x2\x6F\x1\x65\x1\x75\x1\x69\x1\x77\x1\x74\x1\x30\x1"+
			"\x69\x1\x6C\xB\xFFFF\x1\x74\x1\x6F\x1\x72\x1\x4C\x1\x6A\x1\x73\x2\x65"+
			"\x1\x63\x1\x73\x2\xFFFF\x1\x65\x1\xFFFF\x1\x6F\x1\x30\x1\x70\x1\x6C\x1"+
			"\x6E\x1\x65\x1\x6C\x2\x30\x1\xFFFF\x1\x64\x1\x66\x1\x30\x1\x6C\x1\x69"+
			"\x1\x46\x1\x65\x1\x73\x3\x30\x1\x65\x1\x72\x1\x69\x1\xFFFF\x4\x30\x1"+
			"\x65\x2\xFFFF\x2\x30\x1\xFFFF\x1\x30\x1\x6E\x1\x5F\x1\x63\x1\x30\x3\xFFFF"+
			"\x1\x30\x1\x69\x1\x64\x4\xFFFF\x1\x30\x3\xFFFF\x1\x67\x1\x54\x1\x74\x2"+
			"\xFFFF\x1\x74\x1\x30\x1\xFFFF\x1\x30\x1\x59\x1\x30\x1\x73\x2\xFFFF\x1"+
			"\x50\x1\xFFFF\x1\x30\x1\x45\x1\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA7_maxS =
			"\x1\x7E\x1\x6C\x1\x73\x1\x69\x1\x73\x2\x6F\x1\x72\x1\x68\x1\x6F\x1\x66"+
			"\x1\x6F\x1\x65\x6\xFFFF\x1\x2D\x2\x3D\x1\x3E\x1\xFFFF\x1\x2A\x5\xFFFF"+
			"\x1\x6E\x1\x6F\x1\x74\x1\x62\x4\xFFFF\x1\x61\x2\x73\x1\x61\x1\x6C\x3"+
			"\x7A\x1\x76\x1\x74\x2\x6F\x1\x65\x1\x75\x1\x69\x1\x77\x1\x74\x1\x7A\x1"+
			"\x69\x1\x6C\xB\xFFFF\x1\x74\x1\x6F\x1\x72\x1\x4C\x1\x6A\x1\x73\x2\x65"+
			"\x1\x63\x1\x73\x2\xFFFF\x1\x65\x1\xFFFF\x1\x6F\x1\x7A\x1\x70\x1\x6C\x1"+
			"\x6E\x1\x65\x1\x6C\x2\x7A\x1\xFFFF\x1\x64\x1\x66\x1\x7A\x1\x6C\x1\x69"+
			"\x1\x46\x1\x65\x1\x73\x3\x7A\x1\x65\x1\x72\x1\x69\x1\xFFFF\x4\x7A\x1"+
			"\x65\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x7A\x1\x6E\x1\x5F\x1\x63\x1\x7A\x3\xFFFF"+
			"\x1\x7A\x1\x69\x1\x64\x4\xFFFF\x1\x7A\x3\xFFFF\x1\x67\x1\x54\x1\x74\x2"+
			"\xFFFF\x1\x74\x1\x7A\x1\xFFFF\x1\x7A\x1\x59\x1\x7A\x1\x73\x2\xFFFF\x1"+
			"\x50\x1\xFFFF\x1\x7A\x1\x45\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA7_acceptS =
			"\xD\xFFFF\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x4\xFFFF\x1\x23\x1"+
			"\xFFFF\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x4\xFFFF\x1\x31\x1\x32\x1\x33"+
			"\x1\x34\x14\xFFFF\x1\x35\x1\x1C\x1\x1D\x1\x22\x1\x1E\x1\x1F\x1\x20\x1"+
			"\x2A\x1\x21\x1\x30\x1\x24\xA\xFFFF\x1\x4\x1\x5\x1\xFFFF\x1\x6\x9\xFFFF"+
			"\x1\x11\xE\xFFFF\x1\x9\x5\xFFFF\x1\x10\x1\x12\x2\xFFFF\x1\x2B\x5\xFFFF"+
			"\x1\xE\x1\x2\x1\xF\x3\xFFFF\x1\xA\x1\xB\x1\xC\x1\x13\x1\xFFFF\x1\x14"+
			"\x1\x15\x1\x2C\x3\xFFFF\x1\x1\x1\x3\x2\xFFFF\x1\xD\x4\xFFFF\x1\x8\x1"+
			"\x2D\x1\xFFFF\x1\x2E\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2F";
		private const string DFA7_specialS =
			"\x9E\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x25\x1\xFFFF\x2\x25\x12\xFFFF\x1\x25\x1\xFFFF\x1\x22\x5\xFFFF\x1"+
				"\x18\x1\x19\x1\x10\x1\x12\x1\x1C\x1\x13\x1\xD\x1\x11\xA\x23\x1\x1D\x1"+
				"\x17\x1\x14\x1\x16\x1\x15\x1\xFFFF\x1\xE\x1\x24\x1\x1F\x6\x24\x1\x1E"+
				"\x5\x24\x1\x21\x3\x24\x1\x20\x7\x24\x6\xFFFF\x2\x24\x1\x1\x1\x24\x1"+
				"\x2\x1\x3\x2\x24\x1\x4\x2\x24\x1\x5\x1\x24\x1\x9\x1\xA\x1\x6\x2\x24"+
				"\x1\xC\x1\x7\x1\x24\x1\xB\x1\x8\x3\x24\x1\x1A\x1\xFFFF\x1\x1B\x1\xF",
				"\x1\x27\xA\xFFFF\x1\x26",
				"\x1\x28\x6\xFFFF\x1\x29",
				"\x1\x2A\x7\xFFFF\x1\x2B",
				"\x1\x2C\x7\xFFFF\x1\x2D\x4\xFFFF\x1\x2E",
				"\x1\x2F\x9\xFFFF\x1\x30",
				"\x1\x31",
				"\x1\x32\x9\xFFFF\x1\x33",
				"\x1\x34",
				"\x1\x35\x9\xFFFF\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3A",
				"\x1\x3D\xF\xFFFF\x1\x3C",
				"\x1\x3F",
				"\x1\x41",
				"",
				"\x1\x43",
				"",
				"",
				"",
				"",
				"",
				"\x1\x45",
				"\x1\x46",
				"\x1\x48\x2E\xFFFF\x1\x47",
				"\x1\x49",
				"",
				"",
				"",
				"",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x7\x24\x1\x51\x12"+
				"\x24",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x5D",
				"\x1\x5E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"",
				"",
				"\x1\x69",
				"",
				"\x1\x6A",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x73",
				"\x1\x74",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\x1\x79",
				"\x1\x7A",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x85",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x8E",
				"\x1\x8F",
				"",
				"",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"",
				"\x1\x91",
				"\x1\x92",
				"\x1\x93",
				"",
				"",
				"\x1\x94",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x97",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x99",
				"",
				"",
				"\x1\x9A",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x9C",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( CLASS | ELSE | FALSE | FI | IF | IN | INHERITS | ISVOID | LET | LOOP | POOL | THEN | WHILE | CASE | ESAC | NEW | OF | NOT | TRUE | VOID | SELF | DOT | ATSIGN | NEG | MULT | DIV | PLUS | MINUS | LE | LT | GE | GT | EQUAL | ASSIGN | SEMI | LPAREN | RPAREN | LCURLY | RCURLY | COMMA | COLON | HENCE | IntTypeName | BoolTypeName | StringTypeName | ObjectTypeName | SelfTypeTypeName | MULTILINE_COMMENT | STRING | INTEGER | ID | WS | COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace CoolCompiler
